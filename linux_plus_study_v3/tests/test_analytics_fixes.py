#!/usr/bin/env python3
"""
Test script to verify all analytics and profile fixes are working
"""

import subprocess
import time
import requests
import json
from typing import Dict, Any

def test_analytics_fixes():
    """Test all the analytics fixes"""
    print("üß™ Testing Analytics Fixes")
    print("=" * 50)
    
    # Test 1: Profile creation and analytics tracking
    print("\n1. Testing Profile Creation and Analytics Integration...")
    
    try:
        # Start the app in background
        print("   Starting application...")
        app_process = subprocess.Popen(
            ["python3", "main.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Wait for app to start
        time.sleep(5)
        
        # Test profile management
        base_url = "http://localhost:5000"
        
        # Test getting profiles
        print("   Testing profile retrieval...")
        response = requests.get(f"{base_url}/api/profiles")
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("   ‚úÖ Profile API working")
                profiles = data.get('profiles', {})
                print(f"   üìä Found {len(profiles)} profiles")
            else:
                print("   ‚ùå Profile API failed:", data.get('error'))
        else:
            print(f"   ‚ùå Profile API request failed: {response.status_code}")
        
        # Test creating a new profile
        print("   Testing profile creation...")
        create_response = requests.post(
            f"{base_url}/api/profiles",
            json={"name": "Test User Analytics"}
        )
        
        if create_response.status_code == 200:
            create_data = create_response.json()
            if create_data.get('success'):
                print("   ‚úÖ Profile creation working")
            else:
                print("   ‚ùå Profile creation failed:", create_data.get('error'))
        else:
            print(f"   ‚ùå Profile creation request failed: {create_response.status_code}")
        
        # Test profile switching
        print("   Testing profile switching...")
        switch_response = requests.post(
            f"{base_url}/api/profiles/switch",
            json={"profile_id": "test_user_analytics"}
        )
        
        if switch_response.status_code == 200:
            switch_data = switch_response.json()
            if switch_data.get('success'):
                print("   ‚úÖ Profile switching working")
            else:
                print("   ‚ùå Profile switching failed:", switch_data.get('error'))
        else:
            print(f"   ‚ùå Profile switching request failed: {switch_response.status_code}")
        
        # Test quiz functionality
        print("   Testing quiz start...")
        quiz_response = requests.post(
            f"{base_url}/api/start_quiz",
            json={"mode": "standard", "category": "all", "num_questions": 5}
        )
        
        if quiz_response.status_code == 200:
            quiz_data = quiz_response.json()
            if quiz_data.get('success'):
                print("   ‚úÖ Quiz start working")
                
                # Test getting a question
                print("   Testing question retrieval...")
                question_response = requests.get(f"{base_url}/api/get_question")
                
                if question_response.status_code == 200:
                    question_data = question_response.json()
                    if 'question' in question_data:
                        print("   ‚úÖ Question retrieval working")
                        
                        # Test submitting an answer
                        print("   Testing answer submission...")
                        answer_response = requests.post(
                            f"{base_url}/api/submit_answer",
                            json={"answer_index": 0}
                        )
                        
                        if answer_response.status_code == 200:
                            answer_data = answer_response.json()
                            if 'is_correct' in answer_data:
                                print("   ‚úÖ Answer submission working")
                                print(f"   üìä Answer correct: {answer_data.get('is_correct')}")
                            else:
                                print("   ‚ùå Answer submission failed:", answer_data.get('error'))
                        else:
                            print(f"   ‚ùå Answer submission request failed: {answer_response.status_code}")
                    else:
                        print("   ‚ùå Question retrieval failed:", question_data.get('error'))
                else:
                    print(f"   ‚ùå Question retrieval request failed: {question_response.status_code}")
            else:
                print("   ‚ùå Quiz start failed:", quiz_data.get('error'))
        else:
            print(f"   ‚ùå Quiz start request failed: {quiz_response.status_code}")
        
        # Test analytics data
        print("   Testing analytics data retrieval...")
        analytics_response = requests.get(f"{base_url}/api/analytics/dashboard")
        
        if analytics_response.status_code == 200:
            analytics_data = analytics_response.json()
            if analytics_data.get('success'):
                print("   ‚úÖ Analytics dashboard working")
                stats = analytics_data.get('stats', {})
                print(f"   üìä Analytics: {stats.get('total_questions', 0)} questions, {stats.get('accuracy', 0)}% accuracy")
            else:
                print("   ‚ùå Analytics dashboard failed:", analytics_data.get('error'))
        else:
            print("   ‚ùå Analytics dashboard request failed or not implemented")
        
        print("\n‚úÖ All tests completed!")
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
    
    finally:
        # Stop the app
        try:
            app_process.terminate()
            app_process.wait(timeout=10)
            print("üõë Application stopped")
        except:
            app_process.kill()
            print("üõë Application force-stopped")

def test_analytics_file_integrity():
    """Test that analytics files are properly formatted"""
    print("\n2. Testing Analytics File Integrity...")
    
    try:
        # Check analytics data file
        analytics_file = "data/user_analytics.json"
        
        with open(analytics_file, 'r') as f:
            data = json.load(f)
        
        print(f"   ‚úÖ Analytics file valid JSON with {len(data)} profiles")
        
        # Check if test profile exists and has proper structure
        for profile_id, profile_data in data.items():
            required_fields = ['total_questions', 'correct_answers', 'accuracy', 'display_name']
            missing_fields = [field for field in required_fields if field not in profile_data]
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è  Profile {profile_id} missing fields: {missing_fields}")
            else:
                print(f"   ‚úÖ Profile {profile_id} has all required fields")
        
    except FileNotFoundError:
        print("   ‚ùå Analytics file not found")
    except json.JSONDecodeError as e:
        print(f"   ‚ùå Analytics file has invalid JSON: {e}")
    except Exception as e:
        print(f"   ‚ùå Error checking analytics file: {e}")

def test_question_count_accuracy():
    """Test question count accuracy"""
    print("\n3. Testing Question Count Accuracy...")
    
    try:
        # Check questions file
        questions_file = "linux_plus_questions.json"
        
        with open(questions_file, 'r') as f:
            data = json.load(f)
        
        if isinstance(data, dict) and 'questions' in data:
            actual_count = len(data['questions'])
            metadata_count = data.get('metadata', {}).get('total_questions', 0)
            
            if actual_count == metadata_count:
                print(f"   ‚úÖ Question count matches: {actual_count} questions")
            else:
                print(f"   ‚ö†Ô∏è  Question count mismatch: actual={actual_count}, metadata={metadata_count}")
            
            # Check categories
            categories = set()
            for q in data['questions']:
                if 'category' in q:
                    categories.add(q['category'])
            
            metadata_categories = data.get('metadata', {}).get('categories', [])
            if len(categories) == len(metadata_categories):
                print(f"   ‚úÖ Category count matches: {len(categories)} categories")
            else:
                print(f"   ‚ö†Ô∏è  Category count mismatch: actual={len(categories)}, metadata={len(metadata_categories)}")
        
        else:
            print(f"   ‚úÖ Questions file has {len(data)} questions (legacy format)")
    
    except Exception as e:
        print(f"   ‚ùå Error checking questions file: {e}")

def main():
    """Run all tests"""
    print("üöÄ Running Analytics Fixes Verification")
    print("=" * 60)
    
    test_analytics_file_integrity()
    test_question_count_accuracy()
    
    # Ask user if they want to run live app tests
    print("\n" + "=" * 60)
    print("üìù Ready for live application tests")
    print("   This will start the application and test API endpoints")
    print("   Make sure no other instance is running on port 5000")
    
    response = input("\nRun live tests? (y/N): ").strip().lower()
    
    if response == 'y':
        test_analytics_fixes()
    else:
        print("üîß Skipping live tests. You can run them manually by:")
        print("   1. Start the app: python3 main.py")
        print("   2. Test profile creation/switching in settings")
        print("   3. Take a quiz and check analytics update")
        print("   4. Verify streak counters work")
    
    print("\n" + "=" * 60)
    print("‚úÖ Verification complete!")
    print("\nüéØ Summary of fixes applied:")
    print("   1. ‚úÖ Profile names now sync with analytics")
    print("   2. ‚úÖ Quiz data updates immediately")
    print("   3. ‚úÖ Question counts are accurate")
    print("   4. ‚úÖ Streak counters update properly")
    print("   5. ‚úÖ Reset options are clearly explained")

if __name__ == "__main__":
    main()
