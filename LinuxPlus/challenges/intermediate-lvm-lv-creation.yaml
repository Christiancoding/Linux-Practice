# --- Challenge Definition: Create LVM Logical Volume ---
# Based on Idea #38 from 'List of Linux+ Challenge Ideas (XKO-005).pdf'

id: intermediate-lvm-lv-creation
name: "Create an LVM Logical Volume"
description: |
  **Objective:** Create a 50MB logical volume named `applv` within the existing volume group `datavg`.

  **Details:**
  * Assume the `datavg` volume group has already been created on `/dev/sdb1`.
  * Use the `lvcreate` command to create the new logical volume.
  * The required size is 50 Megabytes.

category: "System Management" # Or "Storage"
difficulty: "Intermediate"
concepts: ["lvm", "lvcreate", "lvs", "vgdisplay"]
objective_refs: ["1.3"] # Manage storage

estimated_time_mins: 10
distro_compatibility: ["Any"] # LVM commands are generally consistent
solution_file: "solutions/intermediate-lvm-lv-creation.md" # Placeholder path

score: 100

# Setup ensures lvm2 is installed and creates a prerequisite VG.
# NOTE: 'ensure_disk_available' isn't implemented, simulating with run_command.
# Assumes /dev/sdb is an available disk in the base VM for practice.
setup:
  - type: ensure_package_installed
    package: lvm2
    update_cache: true # Ensure package manager cache is updated if needed
    notes: "Ensure LVM tools are available."
  - type: run_command
    command: "sudo pvcreate /dev/sdb1 || echo 'PV might already exist'" # Create PV on a partition
    user_context: root # Assumes roo user has sudo
    notes: "Initialize physical volume (ignore error if already done)."
  - type: run_command
    command: "sudo vgcreate datavg /dev/sdb1 || echo 'VG might already exist'" # Create the VG
    user_context: root
    notes: "Create the volume group 'datavg' (ignore error if already done)."
  - type: run_command
    command: "sudo lvremove -f /dev/datavg/applv || echo 'LV cleanup'" # Ensure LV doesn't exist initially
    user_context: root
    notes: "Attempt to remove pre-existing LV for clean state."

# Validation checks run after user completes the task
# Using the split structure: final_state_checks and process_validation_checks are top-level keys.
final_state_checks: # Verify the outcome
  - type: check_lvm_state
    check_type: lv_exists # Verify the logical volume exists by name
    vg_name: datavg
    lv_name: applv
    expected_state: true
    notes: "Check if the logical volume 'datavg/applv' exists."

  - type: check_lvm_state
    check_type: lv_size # Verify the size is approximately correct
    vg_name: datavg
    lv_name: applv
    min_size_mb: 48 # Allow slight variation due to extents/metadata
    max_size_mb: 52
    notes: "Check if the logical volume size is around 50MB."

# Optional checks for specific methods/anti-cheating (must be top-level key if used)
# process_validation_checks:
#   - type: check_history
#     command_pattern: "lvcreate .* -n applv .* -L 50M .* datavg" # Check for lvcreate command
#     expected_count: ">=1"
#     notes: "Check if 'lvcreate' command for 'applv' appears in history."

hints: # Optional hints for the learner
  - text: "Which LVM command is used to create new logical volumes?"
    cost: 0
  - text: "The `lvcreate` command requires specifying the size (e.g., `-L 50M`), the name (`-n name`), and the volume group."
    cost: 10
  - text: "You can verify existing VGs with `vgs` and LVs with `lvs`."
    cost: 15

# Optional flag if desired
flag: "CTF{Logical_Volume_Created}"


